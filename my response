// ====== SERVER (server/index.js) ======
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const cors = require("cors");

const app = express();
app.use(cors());
const server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: "http://localhost:5173",
    methods: ["GET", "POST"]
  }
});

let users = {};

io.on("connection", (socket) => {
  console.log("User connected: ", socket.id);

  socket.on("setUsername", (username) => {
    users[socket.id] = { username, online: true };
    io.emit("userList", users);
  });

  socket.on("sendMessage", (data) => {
    io.emit("receiveMessage", {
      ...data,
      timestamp: new Date().toLocaleTimeString()
    });
  });

  socket.on("typing", (data) => {
    socket.broadcast.emit("typing", data);
  });

  socket.on("privateMessage", ({ to, message, from }) => {
    io.to(to).emit("privateMessage", { message, from });
  });

  socket.on("disconnect", () => {
    console.log("User disconnected: ", socket.id);
    delete users[socket.id];
    io.emit("userList", users);
  });
});

server.listen(3000, () => console.log("Server running on port 3000"));

// ====== CLIENT (client/src/App.jsx) ======
import { useEffect, useState } from "react";
import io from "socket.io-client";
const socket = io("http://localhost:3000");

function App() {
  const [username, setUsername] = useState("");
  const [message, setMessage] = useState("");
  const [chat, setChat] = useState([]);
  const [typing, setTyping] = useState("");
  const [users, setUsers] = useState({});

  useEffect(() => {
    socket.on("receiveMessage", (data) => {
      setChat((prev) => [...prev, data]);
    });
    socket.on("typing", ({ username }) => {
      setTyping(`${username} is typing...`);
      setTimeout(() => setTyping(""), 1000);
    });
    socket.on("userList", (list) => setUsers(list));
  }, []);

  const handleSend = () => {
    socket.emit("sendMessage", { username, message });
    setMessage("");
  };

  const handleTyping = () => {
    socket.emit("typing", { username });
  };

  const handleLogin = () => {
    socket.emit("setUsername", username);
  };

  return (
    <div className="p-4">
      {!users[socket.id]?.username ? (
        <div>
          <input onChange={(e) => setUsername(e.target.value)} placeholder="Username" />
          <button onClick={handleLogin}>Join Chat</button>
        </div>
      ) : (
        <>
          <div className="flex flex-col h-[80vh] overflow-y-auto border p-2">
            {chat.map((msg, index) => (
              <div key={index}>
                <b>{msg.username}</b>: {msg.message} <small>{msg.timestamp}</small>
              </div>
            ))}
          </div>
          <div>{typing}</div>
          <input
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyDown={handleTyping}
            placeholder="Type a message..."
          />
          <button onClick={handleSend}>Send</button>
          <div>
            <h4>Online Users:</h4>
            <ul>
              {Object.values(users).map((u, i) => (
                <li key={i}>{u.username}</li>
              ))}
            </ul>
          </div>
        </>
      )}
    </div>
  );
}

export default App;

// ====== CLIENT CONFIG (client/vite.config.js) ======
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173
  }
});
